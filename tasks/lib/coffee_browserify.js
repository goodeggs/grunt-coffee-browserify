// Generated by CoffeeScript 1.7.1
var CoffeeBrowserify, EventEmitter, browserify, coffee, compilers, defaultCompiler, fs, path, through, uglify,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

browserify = require('browserify');

coffee = require('coffee-script');

through = require('through');

uglify = require('uglify-js');

fs = require('fs');

path = require('path');

EventEmitter = require('events').EventEmitter;

defaultCompiler = function(src, filepath, debug, done) {
  return process.nextTick(done.bind(null, null, src));
};

compilers = {
  '.js': defaultCompiler,
  '.json': defaultCompiler,
  '.node': defaultCompiler,
  '.coffee': function(src, filepath, debug, done) {
    var code, js, map, v3SourceMap, _ref;
    if (debug) {
      _ref = coffee.compile(src, {
        bare: true,
        sourceMap: true,
        filename: filepath
      }), js = _ref.js, v3SourceMap = _ref.v3SourceMap;
      code = js;
      if (v3SourceMap) {
        map = JSON.parse(v3SourceMap);
        map.sources = [filepath];
        map.sourcesContent = [src];
        code += '\n//@ sourceMappingURL=data:application/json;base64,';
        code += new Buffer(JSON.stringify(map)).toString('base64');
      }
    } else {
      code = coffee.compile(src, {
        bare: true,
        filename: filepath
      });
    }
    return process.nextTick(done.bind(null, null, code));
  }
};

module.exports = CoffeeBrowserify = (function(_super) {
  __extends(CoffeeBrowserify, _super);

  function CoffeeBrowserify() {
    return CoffeeBrowserify.__super__.constructor.apply(this, arguments);
  }

  CoffeeBrowserify.prototype.run = function(config, done) {
    var bundle, code, cwd, expose, item, s, target, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
    bundle = browserify({
      extensions: ['.coffee']
    });
    bundle.transform((function(_this) {
      return function(filename) {
        var end, src, write;
        _this.emit('filename', filename);
        src = '';
        write = function(buf) {
          return src += buf;
        };
        end = function() {
          var code, compiler, ext;
          ext = path.extname(filename);
          compiler = compilers[ext];
          if (compiler == null) {
            throw new Error("No compiler for " + filename);
          }
          return code = compiler(src, filename, config.debug, (function(_this) {
            return function(err, code) {
              _this.queue(code);
              return _this.queue(null);
            };
          })(this));
        };
        return through(write, end);
      };
    })(this));
    cwd = process.cwd();
    _ref = config.add || [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      item = _ref[_i];
      bundle.add(path.resolve(cwd, item));
    }
    _ref1 = config.external || [];
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      item = _ref1[_j];
      bundle.external(item);
    }
    _ref2 = config.require || [];
    for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
      item = _ref2[_k];
      if (typeof item === 'object') {
        for (target in item) {
          expose = item[target];
          bundle.require(target, {
            expose: expose
          });
        }
      } else {
        bundle.require(item);
      }
    }
    code = '';
    s = bundle.bundle({
      transformAll: true,
      debug: config.debug
    }).pipe(through(function(data) {
      return code += data;
    }));
    return s.once('end', function() {
      return fs.writeFile(path.resolve(cwd, config.dest), code, 'utf8', done);
    });
  };

  return CoffeeBrowserify;

})(EventEmitter);
